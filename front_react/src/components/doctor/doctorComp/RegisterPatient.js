import React, {useContext, useState} from 'react'

import { Card, Typography } from "@material-tailwind/react";
import UserService from "../../../services/UserService";

const TABLE_HEAD = ["Full-name", "Email", "AMKA", "Date registered"];

export default function RegisterPatient() {

    const [patientRegisteredList, setPatientRegisteredList] = useState([]);
    const [email, setEmail] = useState('');
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [idnumber, setIdNumber] = useState('');
    const [amka, setAmka] = useState('');

    const [error, setError] = useState(false) // error Message
    const [success, setSuccess] = useState(false) // Success Message

    function generateRandomString(length, includeSpecialChars = true) {
        const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';
        const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const specialChars = '!@#$%^&*()_+~`|}{[]:;?><,./-=';

        let availableChars = lowercaseChars + uppercaseChars + numbers;

        if (includeSpecialChars) {
            availableChars += specialChars;
        }

        let randomString = '';
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * availableChars.length);
            randomString += availableChars[randomIndex];
        }

        return randomString;
    }

    /* Here we register the user by sending the info in the backend */
    async function handleSubmitClick() {
        const data = {
            userName: firstName,
            userSurname: lastName,
            userIdNumber: idnumber,
            userEmail: email,
            userPassword: generateRandomString(10, true), /* generate random password */
            patientAMKA: amka,
            roleId: 1
        }
        const response = await UserService.registerPatient(data)
        if(response.statusCode === 200) {
            console.log("All ok ")
            setSuccess(true)
            setError(false)
        } else {
            console.log("All error")
            setSuccess(false)
            setError(true)
        }
        console.log(data)
    }

    /* Use effect to fetch the last registered patients */
    React.useEffect(() => {
        const getRegisterPatients = async () => {
            const response = await UserService.getAllPatients() // response is a list
            if (response[0].statusCode === 404) {
                setPatientRegisteredList([])
            } else
                setPatientRegisteredList(response)
        }
        getRegisterPatients();
    }, [success])

    return (
        <div className="flex flex-col h-min w-screen sm:w-full p-2 sm:p-10 cursor-default">
            <p className="font-light text-3xl md:text-5xl">
                Register a patient by providing their info
            </p>
            <p className="mt-2 pr-10 font-light text-slate-400 text-sm md:text-base">
                A password will be automatically generated by the system and sent as an email to the patient.
            </p>

            {/* Form to register the user */}
            <form className="w-full h-full mx-auto mt-5">
                {/*<div className="relative z-0 w-full mb-5 group">*/}
                <div className="z-0 w-full mb-5 group">
                    <input
                        type="email"
                        name="floating_email"
                        id="floating_email"
                        className="block py-2.5 px-0 w-max sm:w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-black dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                        placeholder="Email address"
                        required
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    {/*<label htmlFor="floating_email"*/}
                    {/*       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">*/}
                    {/*    Email address*/}
                    {/*</label>*/}
                </div>

                {/* First Name */}
                <div className="">
                    <div className="z-0 w-full mb-5 group">
                        <input
                            type="text"
                            name="floating_first_name"
                            id="floating_first_name"
                            className="block py-2.5 px-0 w-max sm:w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-black dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder="First name"
                            required
                            value={firstName}
                            onChange={(e) => setFirstName(e.target.value)}
                        />
                        {/*<label htmlFor="floating_first_name"*/}
                        {/*       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">*/}
                        {/*    First name*/}
                        {/*</label>*/}
                    </div>

                    {/* Last Name */}
                    {/*<div className="relative z-0 w-full mb-5 group">*/}
                    <div className="z-0 w-full mb-5 group">
                        <input
                            type="text"
                            name="floating_last_name"
                            id="floating_last_name"
                            className="block py-2.5 px-0 w-max sm:w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-black dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder="Last name"
                            required
                            value={lastName}
                            onChange={(e) => setLastName(e.target.value)}
                        />
                        {/*<label htmlFor="floating_last_name"*/}
                        {/*       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">*/}
                        {/*    Last name*/}
                        {/*</label>*/}
                    </div>
                </div>

                {/* Phone */}
                <div className="">
                    {/*<div className="relative z-0 w-full mb-5 group">*/}
                    <div className="z-0 w-full mb-5 group">
                        <input
                            type="text"
                            name="id_number"
                            id="id_number"
                            className="block py-2.5 px-0 w-max sm:w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-black dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder="ID number"
                            required
                            value={idnumber}
                            onChange={(e) => setIdNumber(e.target.value)}
                            pattern="[A-Za-z]{8}" // Enforces exactly 8 letters (uppercase or lowercase)
                            title="ID number must be exactly 8 letters"
                        />
                        {/*<label*/}
                        {/*    htmlFor="id_number"*/}
                        {/*    className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"*/}
                        {/*>*/}
                        {/*    ID number*/}
                        {/*</label>*/}
                    </div>

                    {/* AMKA */}
                    <div className="z-0 w-full mb-5 group">
                        <input
                            type="text"
                            name="floating_company"
                            id="AMKA"
                            className="block py-2.5 px-0 w-max sm:w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-black dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder="AMKA"
                            required
                            value={amka}
                            onChange={(e) => setAmka(e.target.value)}
                        />
                        {/*<label htmlFor="AMKA"*/}
                        {/*       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">*/}
                        {/*    AMKA*/}
                        {/*</label>*/}
                    </div>
                </div>

                <div className="grid md:grid-cols-2 md:gap-6">
                    <button
                        className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-max sm:w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                        onClick={(event) => {
                            event.preventDefault(); // Prevent the default button behavior (e.g., form submission)
                            if (amka.length !== 0 && idnumber.length !== 0 && lastName.length !== 0 && firstName.length !== 0 && email.length !== 0) {
                                handleSubmitClick();
                            }
                        }}
                    >
                        Submit
                    </button>
                    {error ?
                        <div className="z-0 w-full mb-5 group">
                            <label className="text-red-600">
                                An error occurred
                            </label>
                        </div>
                        : success
                            ?
                            <div className="z-0 w-full mb-5 group">
                                <label className="text-green-600">
                                    The patient registered successfully
                                </label>
                            </div> : ""
                    }
                </div>

            </form>

            {/* Table with the previously patients added */}
            <p className={"mt-5 pr-10 font-light text-3xl md:text-5xl"}>
                Some, already registered patients
            </p>
            <div className="h-max sm:h-full w-3/4 sm:w-full overflow-scroll mt-5 bg-white rounded-xl">
                <table className="w-full min-w-max table-auto text-left">
                    <thead>
                    <tr>
                        {TABLE_HEAD.map((head) => (
                            <th key={head} className="border-b border-blue-gray-100 bg-blue-gray-50 p-4">
                                <Typography
                                    variant="small"
                                    color="blue-gray"
                                    className="font-normal leading-none"
                                >
                                    {head}
                                </Typography>
                            </th>
                        ))}
                    </tr>
                    </thead>
                    <tbody>
                    {
                        patientRegisteredList !== null && patientRegisteredList.length > 0 ? (
                                patientRegisteredList
                                    .slice(0, 20) // Limit to the first 20 elements
                                    .map((patient) => (
                                        <tr key={patient.patientId} className="even:bg-blue-gray-50/50">
                                            <td className="p-4">
                                                <Typography variant="small" color="blue-gray" className="font-normal">
                                                    {patient.patientUser.user_name} {patient.patientUser.user_surname}
                                                </Typography>
                                            </td>
                                            <td className="p-4">
                                                <Typography variant="small" color="blue-gray" className="font-normal">
                                                    {patient.patientUser.email}
                                                </Typography>
                                            </td>
                                            <td className="p-4">
                                                <Typography variant="small" color="blue-gray" className="font-normal">
                                                    {patient.patientAMKA}
                                                </Typography>
                                            </td>
                                            <td className="p-4">
                                                <Typography variant="small" color="blue-gray" className="font-normal">
                                                    {patient.patientRegistrationDate}
                                                </Typography>
                                            </td>
                                        </tr>
                                    ))
                            )
                            :
                            <tr key={1} className="even:bg-blue-gray-50/50">
                                <td className="p-4">
                                    <Typography variant="small" color="blue-gray" className="font-normal">
                                        -
                                    </Typography>
                                </td>
                                <td className="p-4">
                                    <Typography variant="small" color="blue-gray" className="font-normal">
                                        -
                                    </Typography>
                                </td>
                                <td className="p-4">
                                    <Typography variant="small" color="blue-gray" className="font-normal">
                                        -
                                    </Typography>
                                </td>
                                <td className="p-4">
                                    <Typography variant="small" color="blue-gray" className="font-normal">
                                        -
                                    </Typography>
                                </td>
                            </tr>
                    }
                    </tbody>
                </table>
            </div>

        </div>
    )
}